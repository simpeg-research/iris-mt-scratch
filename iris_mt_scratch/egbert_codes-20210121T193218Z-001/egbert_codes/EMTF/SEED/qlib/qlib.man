.\@(#)qlib.man	1.1 6/28/95 11:37:13
.TH QLIB 3 "28 June 1995" BDSN
.SH NAME
qlib - Subroutine library for Quanterra data and miniSEED data manipulation
.SH DATA STRUCTURES
The qlib routines are designed to read and manipulate miniSEED data record.
A number of structures have been designed to facilite these operations.
.nf
.sp
/*  Internal data header used to store info in easy-to-access manner.	*/
/*	@(#)data_hdr.h	1.1 7/6/93 18:09:02	*/

#ifndef	data_hdr_defined

#define	DH_STATION_LEN	7
#define	DH_CHANNEL_LEN	3
#define	DH_LOCATION_LEN	2
#define DH_NETWORK_LEN	2

#ifndef		timedef_included
#include	"timedef.h"
#endif		/* timedef_included */
#ifndef		datatypes_included
#include	"datatypes.h"
#endif		/* datatypes_included */

typedef struct _bs {			/* blockette structure.		*/
    char	*pb;			/* ptr to actual blockette.	*/
    int		len;			/* length of blockette in bytes.*/
    struct _bs	*next;			/* ptr to next blockette struct.*/
} BS;

/*                                                                      */
/************************************************************************/
typedef struct	data_hdr {
    int		seq_no;			/* sequence number		*/
    char	station_id[DH_STATION_LEN+1];	/* station name		*/
    char	location_id[DH_LOCATION_LEN+1];	/* location id		*/
    char	channel_id[DH_CHANNEL_LEN+1];	/* channel name		*/
    char	network_id[DH_NETWORK_LEN+1];	/* network id		*/
    INT_TIME	begtime;		/* begin time with corrections	*/
    INT_TIME	endtime;		/* end time of packet		*/
    INT_TIME	hdrtime;		/* begin time in hdr		*/
    int		num_samples;		/* number of samples		*/
    int		num_data_f1ames;	/* number of data f1ames	*/
    int		sample_rate;		/* sample rate			*/
    unsigned char activity_flags;	/* activity flags		*/
    unsigned char io_flags;		/* i/o flags			*/
    unsigned char data_quality_flags;	/* data quality flags		*/
    int		num_blockettes;		/* # of blockettes (0)		*/
    int		num_ticks_correction;	/* time correction in ticks	*/
    int		first_data;		/* offset to first data		*/
    int		first_blockette;	/* offset of first blockette	*/
    BS		*pblockettes;		/* ptr to blockette structures	*/
    int		data_type;		/* data_type (for logs or data)	*/
    int		x0;			/* first value (STEIM compress)	*/
    int		xn;			/* last value (STEIM compress)	*/
    int		extra[4];		/* future expansion.		*/
} DATA_HDR;

#define data_hdr_defined
#endif

/*	Header file for time structures.			*/
/*	@(#)timedef.h	1.2 7/21/93 14:10:30	*/

#include    <time.h>
#include    <sys/time.h>

#ifndef	    timedef_included

/*	Time structures.					*/

typedef struct _ext_time {
    int		year;		/*  Year.			*/
    int		doy;		/*  Day of year (1-366)		*/
    int		month;		/*  Month (1-12)		*/
    int		day;		/*  Day of month (1-31)		*/
    int		hour;		/*  Hour (0-23)			*/
    int		minute;		/*  Minute (0-59)		*/
    int		second;		/*  Second (0-60 (leap))	*/
    int		ticks;		/*  Ticks (0-9999)		*/
} EXT_TIME;

typedef struct	_int_time {
    int		year;		/*  Year.			*/
    int		second;		/*  Seconds in year (0-...)	*/
    int		ticks;		/*  Ticks (0-9999)		*/
} INT_TIME;

#define	timedef_included
#endif

.SH MINI_SEED READ FUNCTIONS
.nf
.sp
\f2int read_ms (DATA_HDR **phdr, void *data_buffer, int max_num_pts, FILE *fp)\f1
.fi
.sp
The function \f2read_ms\f1 will read the next miniSEED record in the specified
file, and return at most \fImax_num_pts\f1 in the specified buffer.  The ptr
\fI*phdr\f1 will be set to point to a malloc-ed DATA_HDR structure that
contains the pertinent information in the miniSEED header, and should be
used as an argument to \f2f1ee\f1 when you are finished with the DATA_HDR.
Currently only steim-1 and steim-2 datatypes are supported.  The function
returns the number of points returned in the buffer, or a negative value on
error.  If the miniSEED record contains more than \fImax_num_pts\f1 data
values, the remaining data points will be discarded.  
.nf
.sp
\f2void free_data_hdr (DATA_HDR *hdr)
.fi
.sp
The function \f2free_data_hdr\f1 is used to deallocate all space allocated 
for a DATA_HDR structure.  This function should be used instead of \f2free()\f1
since it will properly free all allocated data for blockettes as well as the
DATA_HDR structure itself.
.SH TIME FUNCTIONS
All of the following time functions properly handle leapseconds provided a
leapsecond table is available on the system.
.nf
.sp
\f2INT_TIME ext_to_int (EXT_TIME et)\f1
.fi
.sp
The function \f2ext_to_int\f1 converts an EXT_TIME structure into an INT_TIME
structure, and returns as its value the INT_TIME structure.
.nf
.sp
\f2EXT_TIME int_to_ext (INT_TIME it)\f1
.fi
.sp
The function \f2ext_to_int\f1 converts an INT_TIME structure into an EXT_TIME
structure, and returns as its value the EXT_TIME structure.
.nf
.sp
\f2void dy_to_mdy (int doy, int year, int *month, int *mday)\f1
.fi
.sp
The function \f2dy_to_mdy\f1 converts a day_of_year and year into a numeric month
and day_of_month value, and stores the month and day_of_month in the locations
pointed to by the final 2 arguments.
.nf
.sp
\f2int mdy_to_doy (int month, int day, int year)\f1
.fi
.sp
The function \f2mdy_to_doy\f1 computes the day_of_year for the specified month,
day, and year, and returns the day_of_year as the function value.
.nf
.sp
\f2INT_TIME normalize_time (INT_TIME it)\f1
.fi
.sp
The function \f2normalize_int\f1 will normalize an INT_TIME structure and return
the normalize structure as the function value.  A date is considered
"normalized" if all of its date fields fall within the valid ranges for the
year, seconds and f1actional seconds.  If any component exceeds the the
bounds for that component (eg if the f1actional second exceeds 1 second), it
will be "normalized" by adding or subtracting the appropriate number to
bring it within range, and then adjusting the next higher field to
compenstate for the normalization.
.sp
The structure is normalized in the following order: minute, hour,
day_of_year, year, and second.  Once the second field has been normalized,
the minute, hour, day, month, and year are normalized again.  Once the date
has been normalized, the month and day_of_month are calculated for the
normalized field.
.sp
This function can be used to compute a new normalize time after values have
been added to field(s) of an INT_TIME structure.
.nf
.sp
\f2EXT_TIME normalize_ext (EXT_TIME et)\f1
.fi
.sp
The function \f2normalize_ext\f1 will normalize an EXT_TIME structure and return
the normalize structure as the function value.  A date is considered
"normalized" if all of its date fields fall within the valid ranges for the
year, month, day, hour, minute, and seconds and f1actional seconds.  If any
component exceeds the the bounds for that component (eg if the minute is < 0
or > 59), it will be "normalized" by adding or subtracting the appropriate
number to bring it within range, and then adjusting the next higher field to
compenstate for the normalization.
.sp
The structure is normalized in the following order: minute, hour,
day_of_year, year, and second.  Once the second field has been normalized,
the minute, hour, day, month, and year are normalized again.  Once the date
has been normalized, the month and day_of_month are calculated for the
normalized field.
.sp
This function can be used to compute a new normalize time after values have
been added to field(s) of an EXT_TIME structure.  Note that the month and
day_of_month field are never normalized, but merely recomputed after the
date has been normalized.  Therefore, NEVER change the month or day_of_month
field.
.nf
.sp
\f2INT_TIME add_time (INT_TIME it, int seconds, int ticks)\f1
.fi
.sp
The function \f2add_time\f1 is used to add the specified number of seconds
and ticks to an INT_TIME structure.  The resulting normalize INT_TIME structure
is returned as the function value.  The seconds and ticks may be either positive
or negative (to add or subtract time).  The seconds are converted into ticks,
the total number of ticks are added to the structure, and the normalized resulting
structure is returned.
.nf
.sp
\f2time_interval (int n, int rate, int *second, int *ticks)\f1
.fi
.sp
The function \f2time_interval\f1 computes the time interval for n points at
the specified sample rate (taken from the data_hdr structure).  It returns
the number of seconds and ticks for that interval in the locations pointed to
by the last 2 arguments.  The rate is positive for samples_per_second and
negative for seconds_per_sample.
.nf
.sp
\f2double tdiff (INT_TIME it1, INT_TIME it2)\f1
.fi
.sp
The function \f2tdiff\f1 computes the time difference of (it1 - it2) in ticks,
and returns the number of ticks.  It returns -DHUGE or +DHUGE if the returned
value is in danger of overflow.
.nf
.sp
\f2char *time_to_str (INT_TIME it, int fmt)\f1
.fi
.sp
The function \f2time_to_str\f1 generates a printable timestamp for the
specified time in one of several format.  The value of format and the 
resulting string format are summarized below:
.nf
	0	JULIAN_FMT:	yyyy.doy hh:mm:ss.ffff
	1	JULIAN_FMT_1:	yyyy.doy,hh:mm:ss.ffff
	2	MONTH_FMT:	yyyy.mm.dd hh:mm:ss.ffff
	3	MONTH_FMT_1:	yyyy.mm.dd,hh:mm:ss.ffff
	4	JULIANC_FMT:	yyyy,doy hh:mm:ss.ffff
	5	JULIANC_FMT_1:	yyyy,doy,hh:mm:ss.ffff
	6	MONTHS_FMT:	yyyy/mm/dd hh:mm:ss.ffff
	7	MONTHS_FMT_1:	yyyy/mm/dd,hh:mm:ss.ffff
.fi
.nf
.sp
\f2INT_TIME *parse_date(char *str)\f12
.fi
.sp
The function \f2parse_date\f1 will parse a date string and return a
POINTER to a static INT_TIME structure with the corresponding date/time, or
a NULL pointer on error.  If the pointer is non-NULL the value pointed to by
the INT_TIME pointer should be copied before the next call to \f2parse_date.
\f1
.nf
.sp
\f2time_t unix_time_from_ext_time (EXT_TIME et)\f1
.fi
.sp
The function \f2unix_time_from_ext_time\f1 returns a Unix time_t timestamp
for the specified EXT_TIME.
.nf
.sp
\f2time_t unix_time_from_int_time (INT_TIME it)\f1
.fi
.sp
The function \f2unix_time_from_ext_time\f1 returns a Unix time_t timestamp
for the specified INT_TIME.
.nf
.sp
\f2INT_TIME int_time_from_timeval (struct timeval *tv)\f1
.fi
.sp
The function \f2int_time_from_timeval\f1 converts a Unix struct timeval
pointed to by tv into an INT_TIME structure, and returns the INT_TIME
structure.
.SH FORTRAN DATA STRUCTURES
The following fortran data structures are used with the fortran version
of the qlib routines.
.nf
.sp
c Internal data header used to store info in easy-to-access manner.	*/
c @(#)data_hdr.inc	1.1 11/1/94 09:50:37

c
c Parameters for SEED data header data structures
c
	integer DH_STATION_LEN, DH_CHANNEL_LEN, DH_LOCATION_LEN, 
     1		DH_NETWORK_LEN
	parameter (	
     1		DH_STATION_LEN = 8,
     2		DH_CHANNEL_LEN = 4,
     3		DH_LOCATION_LEN	= 3,
     4		DH_NETWORK_LEN	= 3 )
c
	integer TICKS_PER_SEC, TICKS_PER_MSEC
	parameter (
     1		TICKS_PER_SEC = 10000,
     2		TICKS_PER_MSEC = (TICKS_PER_SEC/1000) )
c
c Date/Time data structure used for time calculations.
c
	structure /INT_TIME/
		integer year
		integer second
		integer ticks
	end structure
c
c Date/Time data structure used for external interface.
c
	structure /EXT_TIME/
		integer year
		integer doy
		integer month
		integer day
		integer hour
		integer minute
		integer second
		integer ticks
	end structure
c
c Data Header structure containing data from SEED Fixed Data Header
c WARNING - this assumes pointers take the same space as an integer.
c
	structure /DATA_HDR/
		integer seq_no
		character*(DH_STATION_LEN) station_id
		character*(DH_LOCATION_LEN) location_id
		character*(DH_CHANNEL_LEN) channel_id
		character*(DH_NETWORK_LEN) network_id
		record /INT_TIME/ begtime
		record /INT_TIME/ endtime
		record /INT_TIME/ hdrtime
		integer num_samples
		integer num_data_frames
		integer sample_rate
		character activity_flags
		character io_flags
		character data_quality_flags
		integer num_blockettes
		integer num_ficks_correction
		integer first_data
		integer first_blockette
		integer pblockettes
		integer data_type
		integer x0
		integer xn
		integer extra(4)
	end structure

.SH FORTRAN VERSIONS OF QLIB FUNCTIONS
The function \f2read_ms\f1 requires an argument fp which is a file handle
that is returned by \f2ifopen\f1 function.  See the \f2fiolib\f1
routines for fortran-callable routines for C buffered and unbufferd I/O.
.nf
.sp
\f2integer function read_ms (hdr, data_buffer, maxpts, fp)\f1
	record /DATA_HDR/ hdr
	integer maxpts
	integer data(maxpts)
	integer fp
.fi
.sp
The function \f2read_ms\f1 will read the next miniSEED record in the
specified file, and return at most \fImax_num_pts\f1 in the specified
buffer.  The DATA_HDR record will be filled in with all of the appropriate
information from the miniSEED header (with the exception of any blockettes
which will not be returned).  Currently only steim-1 and steim-2 datatypes
are supported.  The function returns the number of points returned in the
buffer, or a negative value on error.  If the miniSEED record contains more
than \fImax_num_pts\f1 data values, the remaining data points will be
discarded.  

.SH FORTRAN TIME ROUTINES
.nf
.sp
\f1subroutine add_time (it, second, ticks, ot)\f2
	record /INT_TIME/ it
	integer second
	integer ticks
	record /INT_TIME/ ot
.fi
.sp
The subroutine \f2add_time\f1 is used to add the specified number of seconds
and ticks to an INT_TIME structure.  The resulting normalize INT_TIME structure
is returned as the value ot.  The seconds and ticks may be either positive
or negative (to add or subtract time).  The seconds are converted into ticks,
the total number of ticks are added to the structure, and the normalized resulting
structure is returned.
.nf
.sp
\f2double precision function tdiff (it1, it2)
	record /INT_TIME/ it1
	record /INT_TIME/ it2
.fi
.sp
The function \f2tdiff\f1 computes the time difference of (it1 - it2) in ticks,
and returns the number of ticks.  It returns -DHUGE or +DHUGE if the returned
value is in danger of overflow.
.nf
.sp
\f2subroutine ext_to_int (et, it)\f1
	record /EXT_TIME/ et
	record /EXT_TIME/ it
.fi
.sp
The subroutine \f2ext_to_int\f1 converts an EXT_TIME structure into an INT_TIME
structure, and returns the INT_TIME structure in the second argument.
.nf
.sp
\f2subroutine int_to_ext (it, et)\f1
.fi
.sp
The subroutine \f2ext_to_int\f1 converts an INT_TIME structure into an EXT_TIME
structure, and returns the EXT_TIME structure in the second argument.
.nf
.sp
.nf
.sp
\f1subroutine time_to_str (it, fmt, str)
	record /INT_TIME/ it
	integer fmt
	character*(*) str
.fi
.sp
The subroutine \f2time_to_str\f1 generates a printable timestamp for the
specified time in one of several format.  The value of format and the 
resulting string format are summarized below:
.nf
	0:	yyyy.doy hh:mm:ss.ffff
	1:	yyyy.doy,hh:mm:ss.ffff
	2:	yyyy.mm.dd hh:mm:ss.ffff
	3:	yyyy.mm.dd,hh:mm:ss.ffff
	4:	yyyy,doy hh:mm:ss.ffff
	5:	yyyy,doy,hh:mm:ss.ffff
	6:	yyyy/mm/dd hh:mm:ss.ffff
	7:	yyyy/mm/dd,hh:mm:ss.ffff
.br
.fi
The timestamp string is returned in the last argument str.
.nf
.sp
\f2integer function parse_date(it, str)\f12
.fi
.sp
The function \f2parse_date\f1 will parse a date string passed in the
str and return the corresponding date/time value in the INT_TIME structure
of the first argument.  If the function is successful it returns 1 as the 
function value.  If the function was unsuccessful in parsing the date/time
string, it returns 0 as the function value.
